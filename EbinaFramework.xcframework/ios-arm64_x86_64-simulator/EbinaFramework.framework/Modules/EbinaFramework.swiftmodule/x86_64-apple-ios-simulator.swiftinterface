// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target x86_64-apple-ios13.5-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name EbinaFramework
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFAudio
import AVFoundation
import AudioToolbox
import Copustools
@_exported import EbinaFramework
import Foundation
import Swift
import YbridOgg
import YbridOpus
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum OGGConverterError : Swift.Error {
  case failedToCreateAVAudioChannelLayout
  case failedToCreatePCMBuffer
  case other(any Swift.Error)
}
@_hasMissingDesignatedInitializers public class OGGConverter {
  public static func convertOpusOGGToM4aFile(src: Foundation.URL, dest: Foundation.URL) throws
  public static func convertM4aFileToOpusOGG(src: Foundation.URL, dest: Foundation.URL) throws
  @objc deinit
}
public class OGGEncoder {
  convenience public init(format: CoreAudioTypes.AudioStreamBasicDescription, opusRate: Swift.Int32, application: EbinaFramework.Application) throws
  public init(pcmRate: Swift.Int32, pcmChannels: Swift.Int32, pcmBytesPerFrame: Swift.UInt32, opusRate: Swift.Int32, application: EbinaFramework.Application) throws
  @objc deinit
  public func encode(pcm: AudioToolbox.AudioQueueBuffer) throws
  public func encode(pcm: Foundation.Data) throws
  public func bitstream(flush: Swift.Bool = false, fillBytes: Swift.Int32? = nil) -> Foundation.Data
}
public enum Application {
  case voip
  case audio
  case lowDelay
  public static func == (a: EbinaFramework.Application, b: EbinaFramework.Application) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class OGGDecoder {
  public var pcmData: Foundation.Data
  public init(audioData: Foundation.Data) throws
  @objc deinit
}
public class Article {
  public init()
  public func fetchList(callback: @escaping (Swift.Array<Any>) -> Swift.Void)
  @objc deinit
}
extension EbinaFramework.Application : Swift.Equatable {}
extension EbinaFramework.Application : Swift.Hashable {}
